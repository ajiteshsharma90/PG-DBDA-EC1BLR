		core java - day7
classes and objects
constructor
static and non static
array of object

Inheritance
   is a relation
   has a relation

encapsulation

polymorphism

class Emp
{
properties
constructor
method
}


class contractEmp  extends emp
{
  properties
  constructor(      1 2 3)
   {
    super(1 2)
     3
   }
  mehtod
}
class test
{
   main(){
   contractEmp e = new contractEmp();
   
  }
}
-----------------------------------------------
has a relation

class Emp
{
   int id;
   String name;
   Address add;
   
}


class student
{

   int id
   name
     Address add;
}

account
{

  id
  name
 Address add;
}



}



class Address
{

    String city
   String state
   long pin
   int street no

}


class Book
{
  id
  name
  Author au


}
class Author
{
  id
  name
  exp
  no



}



Class Car
{
  int no
  Sting model
  float price
  Engine en;
  tyre  t;

-------------------------------------------------------------------
super
class Object
-----------------------------------------------------  
Polymorphism

many 

forms

many method

more than one method having same name
different functionality

#include<stdio.h>
{
main()
{

f1()
f1()



}
f1()
{



}
f1()
{


}


method overloading

you can have more than one method with same but
no of parameter and type of parameter should different

class soring
{
sort(int[] m)
{



}
sort(String[] s)
{


}
}

main()
{
 int[] mark = new int[4]
 sort(mark)
}

------------------------------------------------
class addition
{

  void static add(int a,int b)
    {

    }

 void static add(int a,int b,int c)
    {

    }


}


main()
{
add(10,20)
add(10,20,40)
}

--------------------------------------------------
developed
class Sorting
{







}




-----------------------------
class A
{
user
int[] mark = new int[4]
 Sorting.sort(mark)

String [] sub = new String[4]
 sorting.sort(sub)
Emp e = new emp[4]
sorting.sort(e)



}

-----------------------------------------------
method overriding
one or more method with same name and same parameters(type or number)

class emp
{   sal;
   get_sal()
   {
     return sal;
   }
}
class permenentEmp extends emp
{

   get_sal()
   {
     
     return sal+ bonus;
   }



}
testOverring
{
main()
{
permenentEmp p = new permenentEmp();

p.get_sal()

}
}

-----------------------------------------------------------------------

runtime polymorphism

super class reference can hold sub class object

int a  =10;
float b = a;






final









